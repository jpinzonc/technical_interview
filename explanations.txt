Question 1:I first convert all strings to lower text. Then create a list of all possible anagrams within the second string. Finally, I set a loop to search the s string in the list of anagrams. The time complexity should be O(n^2), given that there is a ‘for’ and a ‘if’ loop in the function. Question 2:The punctuation in the string is removed and all letters are made lower. Then I find all possible substrings in the string, and test whether each is a palindrome or not. If True, I add that to a list. To return the largest palindrome, I take the palindrome in the list with maximum length. If no palindrome is found the function returns a statement explaining that. Big ‘O’ should be O(n^3) since I have 3 loops. Question 3:The function finds all nodes in the graphs, takes the first node, calculates the distances between this node to the other nodes and add a key, value item to a dictionary, where the value corresponds to the minimum distance to the node. Then it takes the closes node and repeats the calculations. I have 3 loops in my function, therefore O(n) should be O(nodes^3)Question 4:I first sort the values of the nodes and then look to the to the values on the left and the right of the root. If those values are still within the range of the values of the provided nodes, the formula keeps going until they reach the r, at the point it returns the number of steps taken to reach the root and that is the distance. O(n) = O(n1-r)+(O(n2-r)Question 5:For this one I provide a function to create a linked list from random numbers, this function is called within the function to find the node. Once the list is created, the function gets the values of the nodes, and the number (‘position’) of the note. These two values are added to a dictionary. Finally, the key matching the desired position is provided. O(n) = O(m^2)I provide an alternative solution in which the function creates a string in the form list.head.next.data to get the value of the desire position. All that is needed is to repeat next the number of times necessary to get to the position. O(m)